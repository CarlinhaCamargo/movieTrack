//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `URLs.plist`.
    static let urLsPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "URLs", pathExtension: "plist")
    
    /// `bundle.url(forResource: "URLs", withExtension: "plist")`
    static func urLsPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.urLsPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 10 images.
  struct image {
    /// Image `first`.
    static let first = Rswift.ImageResource(bundle: R.hostingBundle, name: "first")
    /// Image `fundo`.
    static let fundo = Rswift.ImageResource(bundle: R.hostingBundle, name: "fundo")
    /// Image `icon-app`.
    static let iconApp = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-app")
    /// Image `icon-claquette`.
    static let iconClaquette = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-claquette")
    /// Image `icon-heart-filled`.
    static let iconHeartFilled = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-heart-filled")
    /// Image `icon-heart`.
    static let iconHeart = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-heart")
    /// Image `icon-search`.
    static let iconSearch = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-search")
    /// Image `icon-star`.
    static let iconStar = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-star")
    /// Image `icon-suggestion`.
    static let iconSuggestion = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-suggestion")
    /// Image `icon-surprised`.
    static let iconSurprised = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-surprised")
    
    /// `UIImage(named: "first", bundle: ..., traitCollection: ...)`
    static func first(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.first, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "fundo", bundle: ..., traitCollection: ...)`
    static func fundo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fundo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-app", bundle: ..., traitCollection: ...)`
    static func iconApp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconApp, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-claquette", bundle: ..., traitCollection: ...)`
    static func iconClaquette(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconClaquette, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-heart", bundle: ..., traitCollection: ...)`
    static func iconHeart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconHeart, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-heart-filled", bundle: ..., traitCollection: ...)`
    static func iconHeartFilled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconHeartFilled, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-search", bundle: ..., traitCollection: ...)`
    static func iconSearch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSearch, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-star", bundle: ..., traitCollection: ...)`
    static func iconStar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconStar, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-suggestion", bundle: ..., traitCollection: ...)`
    static func iconSuggestion(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSuggestion, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-surprised", bundle: ..., traitCollection: ...)`
    static func iconSurprised(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSurprised, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `ListCell`.
    static let listCell = _R.nib._ListCell()
    
    /// `UINib(name: "ListCell", in: bundle)`
    static func listCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.listCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 3 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `emptyListCell`.
    static let emptyListCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "emptyListCell")
    /// Reuse identifier `emptySearchCell`.
    static let emptySearchCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "emptySearchCell")
    /// Reuse identifier `listCell`.
    static let listCell: Rswift.ReuseIdentifier<ListViewCell> = Rswift.ReuseIdentifier(identifier: "listCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 1 view controllers.
  struct segue {
    /// This struct is generated for `MTSavedMoviesViewController`, and contains static references to 1 segues.
    struct mtSavedMoviesViewController {
      /// Segue identifier `segueDetail`.
      static let segueDetail: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MTSavedMoviesViewController, MTDetailsViewController> = Rswift.StoryboardSegueIdentifier(identifier: "segueDetail")
      
      /// Optionally returns a typed version of segue `segueDetail`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func segueDetail(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MTSavedMoviesViewController, MTDetailsViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mtSavedMoviesViewController.segueDetail, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 15 localization keys.
    struct localizable {
      /// Value: 
      static let errorSaving = Rswift.StringResource(key: "errorSaving", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: APIkey
      static let apikeyValue = Rswift.StringResource(key: "apikeyValue", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Could not fetch.
      static let errorFetching = Rswift.StringResource(key: "errorFetching", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Favoritos
      static let favorites = Rswift.StringResource(key: "favorites", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Movie
      static let entityMovieName = Rswift.StringResource(key: "entityMovieName", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Procure um filme
      static let placeholderSearch = Rswift.StringResource(key: "placeholderSearch", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: apikey=
      static let apikeyName = Rswift.StringResource(key: "apikeyName", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: banner
      static let entityAttributeBanner = Rswift.StringResource(key: "entityAttributeBanner", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: baseURL
      static let baseURLValue = Rswift.StringResource(key: "baseURLValue", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: getMovieByID
      static let getMovieByID = Rswift.StringResource(key: "getMovieByID", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: id
      static let entityAttributeID = Rswift.StringResource(key: "entityAttributeID", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: movieSearch
      static let movieSearch = Rswift.StringResource(key: "movieSearch", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: name
      static let entityAttributeName = Rswift.StringResource(key: "entityAttributeName", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: {id}
      static let idMarker = Rswift.StringResource(key: "idMarker", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: {term}
      static let termMarker = Rswift.StringResource(key: "termMarker", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: 
      static func errorSaving(_: Void = ()) -> String {
        return NSLocalizedString("errorSaving", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: APIkey
      static func apikeyValue(_: Void = ()) -> String {
        return NSLocalizedString("apikeyValue", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Could not fetch.
      static func errorFetching(_: Void = ()) -> String {
        return NSLocalizedString("errorFetching", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Favoritos
      static func favorites(_: Void = ()) -> String {
        return NSLocalizedString("favorites", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Movie
      static func entityMovieName(_: Void = ()) -> String {
        return NSLocalizedString("entityMovieName", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Procure um filme
      static func placeholderSearch(_: Void = ()) -> String {
        return NSLocalizedString("placeholderSearch", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: apikey=
      static func apikeyName(_: Void = ()) -> String {
        return NSLocalizedString("apikeyName", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: banner
      static func entityAttributeBanner(_: Void = ()) -> String {
        return NSLocalizedString("entityAttributeBanner", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: baseURL
      static func baseURLValue(_: Void = ()) -> String {
        return NSLocalizedString("baseURLValue", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: getMovieByID
      static func getMovieByID(_: Void = ()) -> String {
        return NSLocalizedString("getMovieByID", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: id
      static func entityAttributeID(_: Void = ()) -> String {
        return NSLocalizedString("entityAttributeID", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: movieSearch
      static func movieSearch(_: Void = ()) -> String {
        return NSLocalizedString("movieSearch", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: name
      static func entityAttributeName(_: Void = ()) -> String {
        return NSLocalizedString("entityAttributeName", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: {id}
      static func idMarker(_: Void = ()) -> String {
        return NSLocalizedString("idMarker", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: {term}
      static func termMarker(_: Void = ()) -> String {
        return NSLocalizedString("termMarker", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _ListCell.validate()
    }
    
    struct _ListCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ListViewCell
      
      let bundle = R.hostingBundle
      let identifier = "listCell"
      let name = "ListCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ListViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ListViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon-heart", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon-heart' is used in nib 'ListCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon-claquette", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon-claquette' is used in nib 'ListCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
      try launchScreen.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon-app") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon-app' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UITabBarController
      
      let bundle = R.hostingBundle
      let mtDetailsViewController = StoryboardViewControllerResource<MTDetailsViewController>(identifier: "MTDetailsViewController")
      let mtSavedMoviesViewController = StoryboardViewControllerResource<MTSavedMoviesViewController>(identifier: "MTSavedMoviesViewController")
      let name = "Main"
      
      func mtDetailsViewController(_: Void = ()) -> MTDetailsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mtDetailsViewController)
      }
      
      func mtSavedMoviesViewController(_: Void = ()) -> MTSavedMoviesViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mtSavedMoviesViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon-suggestion") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon-suggestion' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon-surprised") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon-surprised' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "fundo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'fundo' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon-star") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon-star' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon-search") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon-search' is used in storyboard 'Main', but couldn't be loaded.") }
        if _R.storyboard.main().mtSavedMoviesViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mtSavedMoviesViewController' could not be loaded from storyboard 'Main' as 'MTSavedMoviesViewController'.") }
        if _R.storyboard.main().mtDetailsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mtDetailsViewController' could not be loaded from storyboard 'Main' as 'MTDetailsViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
